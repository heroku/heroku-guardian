name: Publish

on:
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          make setup-dev
      - name: Run pytest (unit tests) and bandit (security test)
        run: |
          make security-test
          make test

      - name: Install the package to make sure nothing is randomly broken
        run: |
          make install

  publish-package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: create python package
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch --tags
          git pull origin main
          pip install setuptools wheel twine
          python -m setup sdist bdist_wheel
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}

  bump-version:
    needs: publish-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main

      - name: Bump version
        run: |
          version_file="heroku_guardian/bin/version.py"

          # https://github.com/bridgecrewio/checkov/blob/master/.github/workflows/build.yml#L87-L132
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch --tags
          git pull origin main
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest tag: $latest_tag"
          new_tag=$(echo $latest_tag | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a, $2+b , $3+1)}')
          echo "new tag: $new_tag"

          printf "# pylint: disable=missing-module-docstring\n__version__ = '$new_tag'""" > $version_file

          git commit -m "Bump to ${new_tag}"  $version_file || echo "No changes to commit"
          git push origin
